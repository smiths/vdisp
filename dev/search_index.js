var documenterSearchIndex = {"docs":
[{"location":"#vdisp.jl","page":"vdisp.jl","title":"vdisp.jl","text":"","category":"section"},{"location":"","page":"vdisp.jl","title":"vdisp.jl","text":"vdisp.readInputFile\nCalculationBehaviour.getEffectiveStress\nCalculationBehaviour.getSurchargePressure\nCalculationBehaviour.getValue","category":"page"},{"location":"#vdisp.readInputFile","page":"vdisp.jl","title":"vdisp.readInputFile","text":"readInputFile(inputPath, outputPath)\n\nReads and parses input file at inputPath and outputs calculations to file at outputPath\n\n\n\n\n\n","category":"function"},{"location":"#Main.CalculationBehaviour.getEffectiveStress","page":"vdisp.jl","title":"Main.CalculationBehaviour.getEffectiveStress","text":"getEffectiveStress(behaviour)\n\nCalculates the effective stress at each nodal point given values in the InputData instance contained in behaviour. Returns two identical  Float64 arrays (unless model is ConsolidationSwell and equilibrium moisture  profile is saturated above water table). VDisp never alters the second array so the original effective stress values are always available for each nodal point,  and alters the first array adding all other stress values to each corresponding nodal point.\n\nCalculations\n\nThe effective stress at depth z, sigma_z, is calculated using the following formulas:\n\nsigma_z = (gamma_sat-gamma_w)z\n\nWhich can be derived from the following equations:\n\nsigma_z = sigma_z + u_w\n\nu_w = gamma_w z\n\nsigma_z = gamma_sat z\n\nThis calculation is repeated at each depth increment.\n\n\n\n\n\n","category":"function"},{"location":"#Main.CalculationBehaviour.getSurchargePressure","page":"vdisp.jl","title":"Main.CalculationBehaviour.getSurchargePressure","text":"getSurchargePressure(behaviour, P, PP)\n\nCalculates the stress after adding foundation at each nodal point below the foundation. The values are added to array P, while array PP remains unchanged. VDisp software  calls this function using P and PP returned from the getEffectiveStress() function.\n\nCalculations\n\nUsing the Boussinesq equation for stress at a point under the corner of a rectangular  area, the stress from adding the foundation is calculated at each depth increment. If the calculation must be done from the center (i.e. behaviour.center == true), the 2:1 method is used: length, a, and width, b, are halved, while the whole equation is  multiplied by a factor of 4 (the leading factor becomes frac2qpi rather than  fracq2pi. This is because the calculation in the center can be seen as splitting the rectangular area into 4 quadrants, where the original center is a corner for each  rectangle. Now the Boussinesq equation for stress at a point under the corner of a rectangular area can be used, however there are 4 of these rectangles contributing to the load, hence the multiplication by a factor of 4). The stress increase at depth z is denoted  as sigma_z, and is calculated using the following equation:\n\nsigma_z = fracq2 pi (texttan^-1(fracabzC)+fracabzC(frac1A^2+frac1B^2))\n\nwhere,\n\nsigma_z is the stress increase at depth z\n\na is the length of the foundation\n\nb is the width of the foundation\n\nA^2 = a^2 + z^2\n\nB^2 = b^2 + z^2\n\nC = sqrta^2+b^2+z^2\n\n\n\n\n\n","category":"function"},{"location":"#Main.CalculationBehaviour.getValue","page":"vdisp.jl","title":"Main.CalculationBehaviour.getValue","text":"getValue(behaviour::ConsolidationSwellCalculationBehaviour)\n\nThis functions first calls getEffectiveStress() and getSurchargePressure() with behaviour as the argument to establish the two arrays P and PP. It then calculates total heave (Δh), subsoil movement (Δh2), and heave  above foundation (Δh1). It also calculates values at each depth increment and places them in two tables,  heaveAboveFoundationTable and heaveBelowFoundationTable. Returns tuple (P, PP, heaveAboveFoundationTable,  heaveBelowFoundationTable, Δh1, Δh2, Δh)\n\nCalculations\n\nDelta e_j = C_c log_10fracsigma_fjsigma_oj text if  sigma_fj  sigma_pj\n\nDelta e_j = C_r log_10fracsigma_pjsigma_oj + C_c log_10fracsigma_fjsigma_pj text if  sigma_fj ge sigma_pj\n\nsigma_oj = fracsigma_oj1 + sigma_oj22\n\nrho_cj = fracDelta e_j1 + e_0jH_j\n\nrho_c = sum_j=1^n rho_cj\n\nDelta e_j: change in void ratio of soil layer j\n\ne_0j: initial void ratio of soil layer j\n\nsigma_oj: effectuve stress of layer j\n\nsigma_oj1: effective stress at top of layer j\n\nsigma_oj2: effective stress at bottom of layer j\n\nsigma_fj: final applied effective stress of layer j\n\nC_c: compression index\n\nC_r: recompression index\n\nrho_cj: one-dimensional consolidation of layer j\n\nH_j: thickness of layer j\n\nn: number of layers\n\nNote: Tables heaveAboveFoundationTable and heaveBelowFoundationTable contain the following values in each row: j, fracdx2 + j times dx, fracrho_cjH_j, sigma_fj-sigma_oj\n\n\n\n\n\n","category":"function"},{"location":"","page":"vdisp.jl","title":"vdisp.jl","text":"Documentation for vdisp.jl","category":"page"}]
}
