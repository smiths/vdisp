var documenterSearchIndex = {"docs":
[{"location":"VDispUsers/Output/#Output","page":"Output","title":"Output","text":"","category":"section"},{"location":"VDispUsers/Output/","page":"Output","title":"Output","text":"VDisp output files are given a default format which include a repeat all the input data, and all relevant output data. The effective stress data are written to a file with the same name, but an extension of \".eff.dat\", by the writeEffectiveStress function.","category":"page"},{"location":"VDispUsers/Output/","page":"Output","title":"Output","text":"OutputFormat.writeDefaultOutput\nOutputFormat.writeEffectiveStresses","category":"page"},{"location":"VDispUsers/Output/#Main.OutputFormat.writeDefaultOutput","page":"Output","title":"Main.OutputFormat.writeDefaultOutput","text":"writeDefaultOutput(outputData::OutputData, path::String)\n\nWrites the outputs in the default format which includes all the input data for traceability purposes, and all the outputs after. By default, it also writes effective stress values to a  file with the same name but different file extension (\".eff.dat\"). For more info on the effective stress outputs, see writeEffectiveStress docs.\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/Output/#Main.OutputFormat.writeEffectiveStresses","page":"Output","title":"Main.OutputFormat.writeEffectiveStresses","text":"writeEffectiveStresses(outputData, outputPath::String)\n\nWrites table of effective stress values of each soil sublayer before and after applying the foundation load to file at outputPath.\n\nVDisp calls this function from within the writeDefaultOutput() function. Thus, by default every VDisp output includes a separate file which displays the effective stress values. This file has the same filepath and name as the normal output file, but has the \".eff.dat\" extension rather than \".dat\".\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Output","page":"Output","title":"Output","text":"","category":"section"},{"location":"VDispDevelopers/Output/","page":"Output","title":"Output","text":"As mentioned in the VDisp Users > Output page, VDisp has a default output format. However, some users may want a different output format. This can easily be achieved through the writeOutput function of the OutputFormat.jl module.","category":"page"},{"location":"VDispDevelopers/Output/","page":"Output","title":"Output","text":"OutputFormat.writeOutput","category":"page"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.writeOutput","page":"Output","title":"Main.OutputFormat.writeOutput","text":"writeOutput(order::Array{Function}, outputData::OutputData, path::String, sep::String=\"\\n\")\n\nThis function can be used to write data from an OutputData instance to file at path in a custom defined order by passing in an Array of functions called order. The return value of  these functions is written to the file, and each function is written in order. The output of each function is separated by sep, which is set to the newline character by default.\n\nNote: It is recommended that each function returns a String, and that this String ends in a newline character\n\nThis function is currently called in VDisp by the writeDefaultOutput() function, which passes in  the default order of functions who's values are written to the output file. These functions are (in order):\n\ngetHeader\nperformGetModelOutput \nperformGetFoundationOutput \ngetFoundationDepth \ngetSoilTable \ngetMaterialInfoTable \ngetDepthToGroundWaterTable \nperformGetDisplacementOutput \nperformGetEquilibriumOutput \nperformGetForcePointOutput \nperformGetCalculationOutput\n\nMore info on these functions can be found below.\n\nFunctions named \"perform<function>\" are \"changing behaviour\" functions. These functions return different things based on the outputData instance passed in. All modules named \"<Info>Behaviour.jl\" deal with this behaviour. See the Design.pdf for more information on this design pattern.\n\nExample Use Case\n\nIf a user wants to include timestamps at the top of each file, and wants to get rid of the sections that are repeats of the input data, they can first define a function called getDate() which returns the timestamp in whatever format they  please. They can then call writeOutput([getData, performGetCalculationOutput], outputData, path). This will output a file with only the timestamp, and output information which is given by performGetCalculationOutput.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Output-Functions","page":"Output","title":"Output Functions","text":"","category":"section"},{"location":"VDispDevelopers/Output/","page":"Output","title":"Output","text":"The following functions can be used by the writeOutput function to write to an output file. They are used in VDisp in a predefined order, but can be manipulated to fit other needs.","category":"page"},{"location":"VDispDevelopers/Output/","page":"Output","title":"Output","text":"OutputFormat.getHeader\nOutputFormat.getHeaderValues\nOutputFormat.getFoundationDepth\nOutputFormat.getFoundationDepthValues\nOutputFormat.getSoilTable\nOutputFormat.getSoilTableValues\nOutputFormat.getMaterialInfoTable\nOutputFormat.getMaterialInfoTableValues\nOutputFormat.getDepthToGroundWaterTable\nOutputFormat.getDepthToGroundWaterTableValue\nOutputFormat.performGetModelOutput\nOutputFormat.performGetModelValue\nOutputFormat.performGetFoundationOutput\nOutputFormat.performGetFoundationValue\nOutputFormat.performGetDisplacementOutput\nOutputFormat.performGetDisplacementValue\nOutputFormat.performGetEquilibriumOutput\nOutputFormat.performGetEquilibriumValue\nOutputFormat.performGetForcePointOutput\nOutputFormat.performGetForcePointValue\nOutputFormat.performGetCalculationOutput\nOutputFormat.performGetCalculationValue","category":"page"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getHeader","page":"Output","title":"Main.OutputFormat.getHeader","text":"getHeader(outputData::OutputData)\n\nReturns String value stating the title of the problem, and depth increments of each layer.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getHeaderValues","page":"Output","title":"Main.OutputFormat.getHeaderValues","text":"getHeaderValues(outputData::OutputData)\n\nReturns a Tuple containing the ordered pair (problemName::Float64, soilLayers::Int, dx::Array{Float64}).\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getFoundationDepth","page":"Output","title":"Main.OutputFormat.getFoundationDepth","text":"getFoundationDepth(outputData::OutputData)\n\nReturns String value stating depth of foundation and total depth of the soil profile.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getFoundationDepthValues","page":"Output","title":"Main.OutputFormat.getFoundationDepthValues","text":"getFoundationDepthValues(outputData::OutputData)\n\nReturns a Tuple containing the ordered pair (foundationDepth::Float64, totalDepth::Float64).\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getSoilTable","page":"Output","title":"Main.OutputFormat.getSoilTable","text":"getSoilTable(outputData::OutputData)\n\nReturns String value containing a table which shows each soil sublayer, its material and material name.\n\nUses PrettyTables.jl to convert Array{Union{String, Int}, 3} given by getMaterialInfoTable() into a String\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getSoilTableValues","page":"Output","title":"Main.OutputFormat.getSoilTableValues","text":"getSoilTableValues(outputData::OutputData)\n\nReturns Array{Union{String, Float64, Int}, 3} value. This array represents the following table, with an entry for each soil sublayer:\n\nSoil Layer Material Material Name\nx x x\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getMaterialInfoTable","page":"Output","title":"Main.OutputFormat.getMaterialInfoTable","text":"getMaterialInfoTable(outputData::OutputData)\n\nReturns String value containing a table which shows each material, its name, and properties (specific gravity, void ratio, water content).\n\nUses PrettyTables.jl to convert Array{Union{String, Float64, Int}, 5} given by getMaterialInfoTable() into a String\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getMaterialInfoTableValues","page":"Output","title":"Main.OutputFormat.getMaterialInfoTableValues","text":"getMaterialInfoTableValues(outputData::OutputData)\n\nReturns Array{Union{String, Float64, Int}, 5} value. This array represents the following table, with an entry for each material:\n\nMaterial Material Name Specific Gravity Water Content Void Ratio\nx x x x x\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getDepthToGroundWaterTable","page":"Output","title":"Main.OutputFormat.getDepthToGroundWaterTable","text":"getDepthToGroundWaterTable(outputData::OutputData)\n\nReturns String value stating the ground water table depth\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getDepthToGroundWaterTableValue","page":"Output","title":"Main.OutputFormat.getDepthToGroundWaterTableValue","text":"getDepthToGroundWaterTableValue(outputData::OutputData)\n\nReturns Float64 value of the depth to the ground water table\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetModelOutput","page":"Output","title":"Main.OutputFormat.performGetModelOutput","text":"performGetModelOutput(outputData::OutputData)\n\nReturns the String returned by the getOutput() function of the ModelBehaviour implementation corresponding to the model used in the outputData struct. Uses getModelOutBehaviour() function to get the specific instance of ModelBehaviour.jl related to the outputData.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetModelValue","page":"Output","title":"Main.OutputFormat.performGetModelValue","text":"performGetModelValue(outputData::OutputData)\n\nReturns the Model value returned by the getValue() function of the ModelBehaviour implementation corresponding to the model used in the outputData struct. Uses getModelOutBehaviour() function to get the specific instance of ModelBehaviour.jl related to the outputData.\n\nConsolidationSwell\nSchmertmann\nSchmertmannElastic\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetFoundationOutput","page":"Output","title":"Main.OutputFormat.performGetFoundationOutput","text":"performGetFoundationOutput(outputData::OutputData)\n\nReturns the String returned by the getOutput() function of the FoundationBehaviour implementation corresponding to the model used in the outputData struct. Uses getFoundationOutBehaviour() function to get the specific instance of FoundationBehaviour.jl related to the outputData.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetFoundationValue","page":"Output","title":"Main.OutputFormat.performGetFoundationValue","text":"performGetFoundationValue(outputData::OutputData)\n\nReturns the Foundation value returned by the getValue() function of the FoundationBehaviour implementation corresponding to the model used in the outputData struct. Uses getFoundationOutBehaviour() function to get the specific instance of FoundationBehaviour.jl related to the outputData.\n\nRectangularSlab\nLongStripFooting\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetDisplacementOutput","page":"Output","title":"Main.OutputFormat.performGetDisplacementOutput","text":"performGetDisplacementOutput(outputData::OutputData)\n\nReturns the String returned by the getOutput() function of the DisplacementBehaviour implementation corresponding to the model used in the outputData struct. Uses getDisplacementInfoBehaviour() function to get the specific instance of DisplacementBehaviour.jl related to the outputData.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetDisplacementValue","page":"Output","title":"Main.OutputFormat.performGetDisplacementValue","text":"performGetDisplacementValue(outputData::OutputData)\n\nReturns the boolean value returned by the getValue() function of the DisplacementBehaviour implementation corresponding to the model used in the outputData struct. Uses getDisplacementInfoBehaviour() function to get the specific instance of DisplacementBehaviour.jl related to the outputData.\n\ntrue - Output increments\nfalse - Output total displacements only\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetEquilibriumOutput","page":"Output","title":"Main.OutputFormat.performGetEquilibriumOutput","text":"performGetEquilibriumOutput(outputData::OutputData)\n\nReturns the String returned by the getOutput() function of the EquilibriumBehaviour implementation corresponding to the model used in the outputData struct. Uses getEquilibriumInfoBehaviour() function to get the specific instance of EquilibriumBehaviour.jl related to the outputData.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetEquilibriumValue","page":"Output","title":"Main.OutputFormat.performGetEquilibriumValue","text":"performGetEquilibriumValue(outputData::OutputData)\n\nReturns the boolean value returned by the getValue() function of the EquilibriumBehaviour implementation corresponding to the model used in the outputData struct. Uses getEquilibriumInfoBehaviour() function to get the specific instance of EquilibriumBehaviour.jl related to the outputData.\n\ntrue - Saturation above ground water table\nfalse - Hydrostatic profile above ground water table\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetForcePointOutput","page":"Output","title":"Main.OutputFormat.performGetForcePointOutput","text":"performGetForcePointOutput(outputData::OutputData)\n\nReturns the String returned by the getOutput() function of the ForcePointBehaviour implementation corresponding to the model used in the outputData struct. Uses getForcePointOutputBehaviour() function to get the specific instance of ForcePointBehaviour.jl related to the outputData.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetForcePointValue","page":"Output","title":"Main.OutputFormat.performGetForcePointValue","text":"performGetForcePointValue(outputData::OutputData)\n\nReturns the boolean value returned by the getValue() function of the ForcePointBehaviour implementation corresponding to the model used in the outputData struct. Uses getForcePointOutputBehaviour() function to get the specific instance of ForcePointBehaviour.jl related to the outputData.\n\ntrue - Force applied at center of foundation\nfalse - Force applied at corner or edge\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetCalculationOutput","page":"Output","title":"Main.OutputFormat.performGetCalculationOutput","text":"performGetCalculationOutput(outputData::OutputData)\n\nReturns the String returned by the getOutput() function of the CalculationBehaviour implementation corresponding to the model used in the outputData struct. Uses getCalculationOutputBehaviour() function to get the specific instance of CalculationBehaviour.jl related to the outputData.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.performGetCalculationValue","page":"Output","title":"Main.OutputFormat.performGetCalculationValue","text":"performGetCalculationValue(outputData)\n\nReturns the Tuple returned by the getValue() function of the CalculationBehaviour implementation corresponding to the model user in the outputData struct.  Uses getCalculationOutputBehaviour() function to get the specific instance of CalculationBehaviour.jl related to the outputData.\n\nTuple Contents\n\nDepending on the model of the calculations, getValue() returns a Tuple containing different info. This info is specified below:\n\nConsolidation / Swell: (P::Array{Float64}, PP::Array{Float64}, heaveAboveFoundationTable::Array{Union{Int, Float64}, 4}, heaveBelowFoundationTable::Array{Union{Int, Float64}, 4}, Δh1::Float64, Δh2::Float64, Δh::Float64)\nP: Array of effective stresses of each soil sublayer after applying foundational forces.\nPP:  Array of effective stresses of each soil sublayer before applying foundational forces.\nheaveAboveFoundationTable: Table containing heave contribution, depth and excess pore pressure values of each soil sublayer above the foundation.\nheaveBelowFoundationTable: Table containing heave contribution, depth and excess pore pressure values of each soil sublayer below the foundation.\nΔh1: total heave contribution above foundation.\nΔh2: total heave contribution below foundation.\nΔh: total heave contribution of soil profile.\nSchmertmann: (P::Array{Float64}, PP::Array{Float64}, settlementTable::Array{Union{Int, Float64}, 3}, Δh::Float64)\nP: Array of effective stresses of each soil sublayer after applying foundational forces.\nPP:  Array of effective stresses of each soil sublayer before applying foundational forces.\nsettlementTable: Table containing settlement vs depth info for each soil sublayer.\nΔh: total settlement of soil profile.\nSchmertmann Elastic: (P::Array{Float64}, PP::Array{Float64}, settlementTable::Array{Union{Int, Float64}, 3}, Δh::Float64)\nP: Array of effective stresses of each soil sublayer after applying foundational forces.\nPP:  Array of effective stresses of each soil sublayer before applying foundational forces.\nsettlementTable: Table containing settlement vs depth info for each soil sublayer.\nΔh: total settlement of soil profile.\n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Specific-Behaviour-Functions","page":"Output","title":"Specific Behaviour Functions","text":"","category":"section"},{"location":"VDispDevelopers/Output/","page":"Output","title":"Output","text":"The following functions are used to get specific instances of the \"changing behaviour\" modules of VDisp.","category":"page"},{"location":"VDispDevelopers/Output/","page":"Output","title":"Output","text":"OutputFormat.getModelOutBehaviour\nOutputFormat.getFoundationOutBehaviour\nOutputFormat.getDisplacementInfoBehaviour\nOutputFormat.getEquilibriumInfoBehaviour\nOutputFormat.getForcePointOutputBehaviour\nOutputFormat.getCalculationOutputBehaviour","category":"page"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getModelOutBehaviour","page":"Output","title":"Main.OutputFormat.getModelOutBehaviour","text":"getModelOutBehaviour(outputData::OutputData)\n\nReturns specific implementation of ModelOutBehaviour given an instance of the OutputData struct.\n\noutputData.inputData.model == ConsolidationSwell: returns ConsolidationSwellBehaviour \noutputData.inputData.model == Schmertmann: returns SchmertmannBehaviour \noutputData.inputData.model == SchmertmannElastic: returns SchmertmannElasticBehaviour \n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getFoundationOutBehaviour","page":"Output","title":"Main.OutputFormat.getFoundationOutBehaviour","text":"getFoundationOutBehaviour(outputData::OutputData)\n\nReturns specific implementation of FoundationBehaviour given an instance of the OutputData struct.\n\noutputData.inputData.foundation == RectangularSlab: returns RectangularSlabBehaviour \noutputData.inputData.foundation == LongStripFooting: returns LongStripFootingBehaviour \n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getDisplacementInfoBehaviour","page":"Output","title":"Main.OutputFormat.getDisplacementInfoBehaviour","text":"getDisplacementInfoBehaviour(outputData::OutputData)\n\nReturns specific implementation of DisplacementBehaviour given an instance of the OutputData struct.\n\noutputData.inputData.outputIncrements: returns DisplacementEachDepthBehaviour \n!outputData.inputData.outputIncrements: returns TotalDisplacementBehaviour \n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getEquilibriumInfoBehaviour","page":"Output","title":"Main.OutputFormat.getEquilibriumInfoBehaviour","text":"getEquilibriumInfoBehaviour(outputData::OutputData)\n\nReturns specific implementation of EquilibriumBehaviour given an instance of the OutputData struct.\n\noutputData.inputData.equilibriumMoistureProfile: returns EquilibriumSaturatedBehaviour \n!outputData.inputData.equilibriumMoistureProfile: returns EquilibriumHydrostaticBehaviour \n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getForcePointOutputBehaviour","page":"Output","title":"Main.OutputFormat.getForcePointOutputBehaviour","text":"getForcePointOutputBehaviour(outputData::OutputData)\n\nReturns specific implementation of ForcePointBehaviour given an instance of the OutputData struct.\n\noutputData.inputData.center: returns CenterForceBehaviour \n!outputData.inputData.center: returns EdgeForceBehaviour \n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/Output/#Main.OutputFormat.getCalculationOutputBehaviour","page":"Output","title":"Main.OutputFormat.getCalculationOutputBehaviour","text":"getCalculationOutputBehaviour(outputData::OutputData)\n\nReturns specific implementation of CalculationBehaviour given an instance of the OutputData struct.\n\noutputData.inputData.model == ConsolidationSwell: returns ConsolidationSwellCalculationBehaviour \noutputData.inputData.model == Schmertmann: returns SchmertmannCalculationBehaviour \noutputData.inputData.model == SchmertmannElastic: returns SchmertmannElasticCalculationBehaviour \n\n\n\n\n\n","category":"function"},{"location":"VDispDevelopers/VDisplArtifacts/#Old-Functions","page":"VDisp Artifacts","title":"Old Functions","text":"","category":"section"},{"location":"VDispDevelopers/VDisplArtifacts/","page":"VDisp Artifacts","title":"VDisp Artifacts","text":"The VDisp program has kept in some of the old functionality of VDispl, like parsing the old input file format and directly writing to an output file. The functions assisting with this process are still available for any future contributors or curious developers to play around with and are listed below:","category":"page"},{"location":"VDispDevelopers/VDisplArtifacts/","page":"VDisp Artifacts","title":"VDisp Artifacts","text":"vdisp.readInputFile","category":"page"},{"location":"VDispDevelopers/VDisplArtifacts/#vdisp.readInputFile","page":"VDisp Artifacts","title":"vdisp.readInputFile","text":"readInputFile(inputPath, outputPath)\n\nReads and parses input file at inputPath and outputs calculations to file at outputPath.\n\nThis function was used to emulate old VDispl software's CLI funcitonality. It is no longer  used in this version of VDisp. It has been left in for any developers that would like to have the command line funcitonality.\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/InputFiles/#Input-Files","page":"Input Files","title":"Input Files","text":"","category":"section"},{"location":"VDispUsers/InputFiles/","page":"Input Files","title":"Input Files","text":"VDisp input files are parsed using the InputParser.jl module. This module is responsible for parsing input files, creating InputData instances, and reporting any possible errors in the input file format in a descriptive and helpful manner.","category":"page"},{"location":"VDispUsers/InputFiles/","page":"Input Files","title":"Input Files","text":"Note: VDisp still contains code that parses the old input file format from the original VDispl project. This code is kept in mainly for testing purposes, in which we test the new VDisp's results against that of the original program's. This also allows flexibility for any future developers or contributors to the project!","category":"page"},{"location":"VDispUsers/InputFiles/","page":"Input Files","title":"Input Files","text":"InputParser.parseCurrentLine\nInputParser.InputData\nInputParser.GUIData\nvdisp.createOutputDataFromGUI\nvdisp.writeGUIDataToFile","category":"page"},{"location":"VDispUsers/InputFiles/#Main.InputParser.parseCurrentLine","page":"Input Files","title":"Main.InputParser.parseCurrentLine","text":"parseCurrentLine(input::Array{String}, items::Int, index::Int, delimiter::String=\" \")\n\nGiven an array of String values, input, the index of a string in this array to parse, index, and the number of values expected to be parsed  in this string, items, parseCurrentLine() returns an Array of values parsed from the specified line, or a NotEnoughValuesError if not enough values were found. There is also an optional argument, delimiter, which specifies the delimiter which separates each value. The default value for delimiter is a single space.\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/InputFiles/#Main.InputParser.InputData","page":"Input Files","title":"Main.InputParser.InputData","text":"InputData()\n\nThe InputData struct contains all the variables needed to perform VDisp calculations.\n\nThere are two main ways to construct an instance of InputData:\n\nParse an input file which follows the speciication of the old VDispl file format. Details about this file format can be found in Appendix F of this publication. This functionality is not used in the modern version of VDisp, it has only been kept to allow people to parse the old input files if they want.\nBy converting values entered in the GUI into the values that populate the fields of an InputData instance. This is the way VDisp creates InputDatainstances, which are then used to make OutputDatainstances, in the createOutputDataFromGUI() function. \n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.GUIData","page":"Input Files","title":"Main.InputParser.GUIData","text":"GUIData()\n\nThe GUIData struct contains all the information parsed from new input file format. This information  is used to populate the GUI entries, significantly speeding up the process and improving the user experience.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#vdisp.createOutputDataFromGUI","page":"Input Files","title":"vdisp.createOutputDataFromGUI","text":"createOutputDataFromGUI()\n\nReturns OutputData instance created from data entered by user in VDisp GUI. Data entered by user is accessed through the global Observable variables they are stored in.\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/InputFiles/#vdisp.writeGUIDataToFile","page":"Input Files","title":"vdisp.writeGUIDataToFile","text":"writeGUIDataToFile(path, outData)\n\nwriteGUIDataToFile() takes in a String, path, which represents a relative file path and writes the contents of writeDefaultOutput(path, outData) to file at path\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/InputFiles/#Error-Handling","page":"Input Files","title":"Error Handling","text":"","category":"section"},{"location":"VDispUsers/InputFiles/","page":"Input Files","title":"Input Files","text":"As mentioned above, the InputParser.jl module is also responsible for handling any errors that might come up in input files. The following are custom defined exceptions to help in this process.","category":"page"},{"location":"VDispUsers/InputFiles/","page":"Input Files","title":"Input Files","text":"InputParser.ParsingError\nInputParser.FoundationError\nInputParser.SoilNumberError\nInputParser.NotEnoughValuesError\nInputParser.ModelError\nInputParser.UnitError\nInputParser.FoundationTypeError\nInputParser.FloatConvertError\nInputParser.IntConvertError\nInputParser.BoolConvertError\nInputParser.DimensionNegativeError\nInputParser.MaterialIndexOutOfBoundsError\nInputParser.PropertyError","category":"page"},{"location":"VDispUsers/InputFiles/#Main.InputParser.ParsingError","page":"Input Files","title":"Main.InputParser.ParsingError","text":"ParsingError()\n\nThere was an error parsing old input file type to create InputData instance.\n\nThis is usually thrown when the module has already caught a specific error while parsing  in another function, and given user the neccessary feedback. This error is then thrown so  it can be caught and handled gracefuly by the script calling the function.\n\nNote: Old input file type is no longer used in the modern version of VDisp. The parsing has been left in for developers who would like to test it out.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.FoundationError","page":"Input Files","title":"Main.InputParser.FoundationError","text":"FoundationError()\n\nThe foundationOption was not read as 1 or 2 in old input file type.\n\nNote: Old input file type is no longer used in the modern version of VDisp. The parsing has been left in for developers who would like to test it out.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.SoilNumberError","page":"Input Files","title":"Main.InputParser.SoilNumberError","text":"SoilNumberError(line::Int)\n\nInvalid sequence of soilLayerNumber specified in old input file type.\n\nEx. The soilLayerNumber of layer 12 is given before layer 11. Invalid sequence: \n\n1  1\n12 2\n11 3    \n16 3\n\nNote: Old input file type is no longer used in the modern version of VDisp. The parsing has been left in for developers who would like to test it out.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.NotEnoughValuesError","page":"Input Files","title":"Main.InputParser.NotEnoughValuesError","text":"NotEnoughValuesError(requiredValues::Int, givenValues::Int, line::Int)\n\nNot enough values were given on the current line being parsed.\n\nNote: If more values than needed are given, extra values are ignored and no error is thrown.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.ModelError","page":"Input Files","title":"Main.InputParser.ModelError","text":"ModelError(line::Int32, value::String)\n\nmodel value was not 0, 1 or 2.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.UnitError","page":"Input Files","title":"Main.InputParser.UnitError","text":"UnitError(line::Int32, value::String)\n\nunit value was not 0, or 1.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.FoundationTypeError","page":"Input Files","title":"Main.InputParser.FoundationTypeError","text":"FoundationTypeError(line::Int32, value::String)\n\nfoundationType value was not 0, or 1.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.FloatConvertError","page":"Input Files","title":"Main.InputParser.FloatConvertError","text":"FloatConvertError(line::Int32, var::String, value::String)\n\nValue could not be converted to a Float. This happens when user enters a non-numeric value  for a field that must be a floating point value.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.IntConvertError","page":"Input Files","title":"Main.InputParser.IntConvertError","text":"IntConvertError(line::Int32, var::String, value::String)\n\nValue could not be converted to an Int. This happens when user enters a non-numeric value  for a field that must be an integer value.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.BoolConvertError","page":"Input Files","title":"Main.InputParser.BoolConvertError","text":"BoolConvertError(line::Int32, var::String, value::String)\n\nValue could not be converted to a Bool. This happens when user enters a value that is not 0 (false) or 1(true).\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.DimensionNegativeError","page":"Input Files","title":"Main.InputParser.DimensionNegativeError","text":"DimensionNegativeError(line::Int32, var::String, value::String)\n\nA dimension was given a negative value.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.MaterialIndexOutOfBoundsError","page":"Input Files","title":"Main.InputParser.MaterialIndexOutOfBoundsError","text":"MaterialIndexOutOfBoundsError(line::Int32, value::String)\n\nGiven material index is not within bounds of given list of materials.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/InputFiles/#Main.InputParser.PropertyError","page":"Input Files","title":"Main.InputParser.PropertyError","text":"PropertyError(msg::String)\n\nValue given for this property is not within constraints. A descriptive message is passed in for msg.\n\n\n\n\n\n","category":"type"},{"location":"VDispUsers/Calculations/#Calculations","page":"Calculations","title":"Calculations","text":"","category":"section"},{"location":"VDispUsers/Calculations/","page":"Calculations","title":"Calculations","text":"VDisp calculations are handled by the CalculationBehaviour.jl module. The following functions are responsible for calculating the effective stresses of the soil before placing any load, the effective stresses after placing the load, and any method specific calculations required afterwards.","category":"page"},{"location":"VDispUsers/Calculations/","page":"Calculations","title":"Calculations","text":"CalculationBehaviour.getEffectiveStress\nCalculationBehaviour.getSurchargePressure\nCalculationBehaviour.getValue\nCalculationBehaviour.schmertmannApproximation","category":"page"},{"location":"VDispUsers/Calculations/#Main.CalculationBehaviour.getEffectiveStress","page":"Calculations","title":"Main.CalculationBehaviour.getEffectiveStress","text":"getEffectiveStress(behaviour)\n\nCalculates the effective stress at each nodal point given values in the InputData instance contained in behaviour. Returns two identical  Float64 arrays (unless model is ConsolidationSwell and equilibrium moisture  profile is saturated above water table). VDisp never alters the second array so the original effective stress values are always available for each nodal point,  and alters the first array adding all other stress values to each corresponding nodal point.\n\nCalculations\n\nThe effective stress at depth z, sigma_z, is calculated using the following formulas:\n\nsigma_z = (gamma_sat-gamma_w)z\n\nWhich can be derived from the following equations:\n\nsigma_z = sigma_z + u_w\n\nu_w = gamma_w z\n\nsigma_z = gamma_sat z\n\nThis calculation is repeated at each depth increment.\n\nThe bulk unit weight, gamma, which is equal to gamma_sat-gamma_w  is calculated by the following formula:\n\ngamma = fracWV = fracG_s (1+w) gamma_w1+e\n\nVariables\n\nsigma_z: stress at depth z\n\nsigma_z: effective stress at depth z\n\ngamma_w: unit weight of water\n\ngamma_sat: unit weight of saturated soil\n\nG_s: specific gravity of soil\n\nw: water content of soil\n\ne: void ratio of soil\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/Calculations/#Main.CalculationBehaviour.getSurchargePressure","page":"Calculations","title":"Main.CalculationBehaviour.getSurchargePressure","text":"getSurchargePressure(behaviour, P, PP)\n\nCalculates the stress after adding foundation at each nodal point below the foundation. The values are added to array P, while array PP remains unchanged. VDisp software  calls this function using P and PP returned from the getEffectiveStress() function.\n\nCalculations\n\nUsing the Boussinesq equation for stress at a point under the corner of a rectangular  area, the stress from adding the foundation is calculated at each depth increment. If the calculation must be done from the center (i.e. behaviour.center == true), the 2:1 method is used: length, a, and width, b, are halved, while the whole equation is  multiplied by a factor of 4 (the leading factor becomes frac2qpi rather than  fracq2pi. This is because the calculation in the center can be seen as splitting the rectangular area into 4 quadrants, where the original center is a corner for each  rectangle. Now the Boussinesq equation for stress at a point under the corner of a rectangular area can be used, however there are 4 of these rectangles contributing to the load, hence the multiplication by a factor of 4). The stress increase at depth z is denoted  as sigma_z, and is calculated using the following equation:\n\nsigma_z = fracq2 pi (texttan^-1(fracabzC)+fracabzC(frac1A^2+frac1B^2)) text where\n\nA^2 = a^2 + z^2\n\nB^2 = b^2 + z^2\n\nC = sqrta^2+b^2+z^2\n\nVariables\n\nq: net applied footing pressure\n\nsigma_z: stress increase at depth z\n\na: length of the foundation\n\nb: width of the foundation\n\nz: depth\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/Calculations/#Main.CalculationBehaviour.getValue","page":"Calculations","title":"Main.CalculationBehaviour.getValue","text":"getValue(behaviour::ConsolidationSwellCalculationBehaviour)\n\nThis functions first calls getEffectiveStress() and getSurchargePressure() with behaviour as the argument to establish the two arrays P and PP. It then calculates total heave (Δh), subsoil movement (Δh2), and heave  above foundation (Δh1). It also calculates values at each depth increment and places them in two tables,  heaveAboveFoundationTable and heaveBelowFoundationTable. Returns tuple (P, PP, heaveAboveFoundationTable,  heaveBelowFoundationTable, Δh1, Δh2, Δh)\n\nCalculations\n\nDelta e_j = C_c log_10fracsigma_fjsigma_oj text if  sigma_fj  sigma_pj\n\nDelta e_j = C_r log_10fracsigma_pjsigma_oj + C_c log_10fracsigma_fjsigma_pj text if  sigma_fj ge sigma_pj\n\nsigma_oj = fracsigma_oj1 + sigma_oj22\n\nrho_cj = fracDelta e_j1 + e_0jH_j\n\nrho_c = sum_j=1^n rho_cj\n\nVariables\n\nDelta e_j: change in void ratio of soil layer j\n\ne_0j: initial void ratio of soil layer j\n\nsigma_oj: effective stress of layer j\n\nsigma_oj1: effective stress at top of layer j\n\nsigma_oj2: effective stress at bottom of layer j\n\nsigma_fj: final applied effective stress of layer j\n\nC_c: compression index\n\nC_r: recompression index\n\nrho_cj: one-dimensional consolidation of layer j\n\nrho_c: oen-dimensional consolidation of soil profile\n\nH_j: thickness of layer j\n\nn: number of layers\n\nNote: Tables heaveAboveFoundationTable and heaveBelowFoundationTable contain the following values in each row: j, fracdx2 + j times dx, fracrho_cjH_j, sigma_fj-sigma_oj\n\n\n\n\n\n","category":"function"},{"location":"VDispUsers/Calculations/#Main.CalculationBehaviour.schmertmannApproximation","page":"Calculations","title":"Main.CalculationBehaviour.schmertmannApproximation","text":"schmertmannApproximation(behaviour, elasticModulusGiven, PP)\n\nCalculates settlement at each depth increment, rho_i, and sums it up to calculate total settlement, rho. If elasticModulus == true, input file must have elastic moduli, E_si, for each soil layer. Else, input file must  have cone penetration resistance data, q_ci, for each soil layer. Returns a 2D array of settlement values with each row  containing the element number, the depth of the layer, and it's settlement.\n\nCalculations\n\nThis subroutine calculates total settlement using the Schmertmann Approximation:\n\nrho = C_1 C_t Delta p Delta z sum_i=1^n fracI_izE_si text where \n\nC_1 = 1 - frac05 sigma_odDelta p C_1 ge 05\n\nC_t = 1 + 02 log_10 fract01\n\nE_si = 25 q_ci text if rectangular footing  35 q_ci text if long strip footing\n\nI_zp = 05 + 01 sqrtfracDelta psigma_izp\n\nI_iz = 0 text if  z  2w text frac43I_zp - fracI_zp z15w text if  z  05w text  else  01 + frac(I_zp-01)z05w\n\nsigma_izp = fracsigma_topi + sigma_boti2\n\nDelta p =  Q - sigma_od\n\nVariables\n\nC_1: correction to account for strain relief from embedment\n\nC_t: correction for time dependant inrease in settlement \n\nsigma_od: effective stress at bottom of foundation\n\nDelta p: net applied footing pressure\n\nQ: applied pressure \n\nt: time in years since construction\n\nDelta z: depth increment\n\nI_iz: influence factor of soil layer i\n\nE_si: elastic modulus of soil layer i \n\nq_ci: cone penetration resistance of soil layer i \n\nsigma_topi: effective stress at top of soil layer i\n\nsigma_boti: effective stress at bottom of soil layer i\n\nrho_i: settlement of soil layer i\n\nrho: total settlement\n\nCode\n\nThe code first calculates the settlement of each soil layer, rho_i, then sums up settlements at each depth increment. The following two formulas are used to achieve this:\n\nrho_i = C_1 C_t Delta p Delta z fracI_izE_si\n\nrho = sum_i=1^n rho_i\n\n\n\n\n\n","category":"function"},{"location":"#VDisp-Documentation","page":"Home","title":"VDisp Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"VDisp is a one-dimensional soil settlement analysis software created to aid undergraduate civil engineering students in their studies of geotechnical engineering. It is created using the Julia programming language, and Qt/QML markup language for the front-end GUI.","category":"page"},{"location":"#Installation-and-Execution","page":"Home","title":"Installation and Execution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Detailed installation and execution instructions for VDisp and Julia can be found under the Installation section of the VDisp Wiki Home Page and the VDisp Wiki Getting Started With Julia Page.","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Current developers of VDisp:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Emil Soleymani\nDr. Spencer Smith","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We gratefully acknowledge the financial support of the Natural Sciences and Engineering Research Council (NSERC) of Canada.  We are also grateful for the work space provided by the Computing and Software Department at McMaster University.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See Acknowledgements.md for more.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See CITATION.cff for citation details.","category":"page"}]
}
